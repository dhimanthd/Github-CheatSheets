List of Git Command:
=================

1. git status
2. git init
3. git add
4. git commit
5. git log
6. git log --oneline
7. git branch (to view or list)
8. git branch <name>
9. git switch <branch name>
10. git checkout <branch name>
11. git switch -c <new branch name>
12. git branch -d <branch name> //to delete a branch which is merged
13. git branch -D <branch name> //to delete a branch which isnt merged (forced Delete)
    Note: Be outside the branch to delete it 
14. git branch -m <new branch name>
    Note: Be in the branch which you want to rename
15. git merge <branch name>
16. git checkout -b <branch name> //create branch and switch(same as command 11)
17. git diff (shows all the unstaged changes)
18. git diff HEAD (shows all the staged and unstaged changes since last commit)
19. git diff --staged (shows all the staged changes)
20. git diff --cached (shows all the staged changes)
21. git diff <branch one> <branch two>
22. git stash
23. git stash pop
24. git stash apply
25. git stash list (for multiple stashes)
26. git stash apply stash@{2} (to specify the stash number)
27. git stash drop stash@{2}
28. git checkout <COMMIT NUMBER> //detach head
29. git switch master
30. git checkout HEAD~1
31. git switch - //goes back to previous HEAD position
32. git checkout HEAD <filename> //to remove the contents before commiting
33. git checkout -- <filename>
34. git restore <filename>
35. git restore --source HEAD~1 <filename>
36. git restore --staged <filename>
37. git reset <commit-hash> //soft reset where  because all that we did was perform a basic or a plane reset and that removed the commits.
        But the changes are still in our working directory.
        So I can get rid of those changes and I can undo stuff in my local files.
        But all that we did right now was tell Git to get rid of some commits.
38. git remote -v // check if the repo is connected to remote, Usually when you clone a repo it will automatically be connected to the repo locally
39. git remote add origin <Url>(github repo) //Connects local repo to the github
40. git push <remote>(origin) <branch>(master)
41. git push origin "localBranch":"remoteBranch"
        got push origin one_b:master
42. git push -u origin master //sets up upstream
    git push // in future we can just use this short-checkout
43. git branch -M main //rename the currect branch to main (be careful you might loose the contect of the actual main)
44. git branch -r //remote tracking branch
45. git fetch <remote> <branch> // download changes from a remote repository, BUT those chqanges will not be automatically integrated into our working files.






